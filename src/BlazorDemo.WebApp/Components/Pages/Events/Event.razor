@page "/new-event"
@page "/edit-event/{id:guid}"

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IEventServices EventServices

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>@_title</PageTitle>

<h3>@_title</h3>

<AuthorizeView>
    @if (UpsertEvent == null)
    {
        <p><em>Loading...</em></p>

    }
    else
    {
        <div class="row">
            <div class="col-md-4">
                <EditForm Model="@UpsertEvent" FormName="editProduct" OnValidSubmit="HandleValidAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="mb-3">
                        <label for="title" class="form-label">Title:</label>
                        <InputText id="title" class="form-control" @bind-Value="UpsertEvent!.Title" />
                        <ValidationMessage For="() => UpsertEvent.Title" />
                    </div>

                    <div class="mb-3">
                        <label for="description" class="form-label">Description:</label>
                        <InputTextArea id="description" class="form-control" @bind-Value="UpsertEvent.Description" />
                        <ValidationMessage For="() => UpsertEvent.Description" />
                    </div>

                    <div class="mb-3">
                        <label for="startDate" class="form-label">Start Date:</label>
                        <InputDate id="startDate" class="form-control" @bind-Value="UpsertEvent.StartDate" />
                        <ValidationMessage For="() => UpsertEvent.StartDate" />
                    </div>

                    <button type="submit" class="btn btn-primary">Save</button>
                    <a class="btn btn-secondary" role="button" href="/events">Cancel</a>

                </EditForm>
            </div>
        </div>
    }
</AuthorizeView>

@code {
    [Parameter]
    public Guid? Id { get; set; }

    [SupplyParameterFromForm]
    public UpsertEvent? UpsertEvent { get; set; }

    private string _title = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.Identity?.IsAuthenticated ?? false)
        {
            NavigationManager.NavigateTo("/sign-in");
        }
         
    }

    protected override async Task OnParametersSetAsync()
    {
        if (UpsertEvent is not null)
        {
            return;
        }

        if (Id.HasValue)
        {
            var getEvent = await EventServices.GetByIdAsync(Id.Value);

            _title = $"Edit Event: '{getEvent!.Title}'";

            UpsertEvent = new()
            {
                Id = getEvent.Id,
                Title = getEvent.Title,
                Description = getEvent.Description,
                StartDate = getEvent.StartDate
            };
        }
        else
        {
            UpsertEvent = new()
            {
                Title = string.Empty,
                StartDate = DateTime.Now.Date
            };

            _title = "New Event";
        }
    }

    private async Task HandleValidAsync()
    {
        ArgumentNullException.ThrowIfNull(UpsertEvent);

        if (Id is not null && Id != Guid.Empty)
        {
            UpsertEvent.Id = Id.Value;
        }

        await EventServices.UpsertAsync(UpsertEvent);


        NavigationManager.NavigateTo("/events");
    }

}
